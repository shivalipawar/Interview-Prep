Production Issue :-
There was a async flow of data where I have update user's list of notifications, which I accidentally was updating each record one by one and this caused cosmos updation failed. So to improve it I later took a buch of notification and updated the at once and at end saved it in database.

Another thing there was a check added to verify the etag on cosmos db so that we access only latest info and no race condition occurs as multiple read writes occur.

Issues faced :-
Latency
Cloud disconnect - Send heartbeat to extend app on mobiles.
Crossbar disconnect

Achievements :-
Learning Grafana and Prometheus was but difficult initially but then I was able to get through docs play around the promql queries and create dashboard and maintain it.


	1. Why was need for crossbar?
We need a stateful connection to send and receive data to and from mobile and cloud.
Also direct connection to mobile app is not possible as the mobile should have public ip.
Issues :-
	1) Apple Music Play delay had to overcome so we implemented pub sub. Where mobile can send response when task is done and cloud subscribe to it. So first response of music will be played and then music is playing and termination of dialog.
	2) Acknowledge to check connectivity of extend and app pub sub was needed.
Imp parts - https://crossbar.io/docs/Getting-Started/

Crossbar node controller - The Crossbar.io is a multi-process architecture. A single instance of Crossbar.io is called Crossbar.io node. When a Crossbar.io node starts, initially it starts a single process called node controller.
Contains -
	Routers are the core facilities responsible for routing WAMP messages.
	Containers are Autobahn Python clients which runs natively as part of Crossbar.io.
	Guests are applications other than routers and containers ,e.g. a nodejs application etc.
Router
	Realm - is equivalent to a namespace. Crossbar.io uses realms as domains for separation of routing and administration.
	Each connection is based on Realm . Roles can be assigned to Realm for authentication and authorization.
	Transport - necessary for allowing incoming connections to Routers. Crossbar.io provides WebSocket and RawSocket Transport. Unless specified the port number of the listening port is 80 and in case of TLS it is 443

Auth in crossbar?
	Extended basic crossbar image and add roles where cloud and mobile phone are connecting as different roles  with some token to be passed.
	So every time the cloud or extend app makes a request this token has to be sent to crossbar then only access is granted.
	Token generation isnt automated yet its static was generated once and expected at both ends. But there are services that can help in generation of token after certain period of time.

	2. Security or authentication in extend?
	Public facing apis like addNotification, updateDeviceInfo, generateSessionId were not authenticated so token based auth is implemented cloud end we used springboot security config which receives the request and scans for the auth token and if not present gives 403 as Forbidden.

	3. Explain pairing and request process of product if asked.
	1. Companion App pairs with HU via BLE
	2. Companion App obtains Extend Id from HU
	3. Companion App obtains a Session Id from the Java Microservice
	4. Companion App registers itself to the crossbar WAMP instance with the session id.
	5. Companion App sends Extend Id + Session Id + Phone Id to the Java Microservice. Companion App uses its Phone Id to register device/contact/app info with the microservice.
	6. Java Microservice saves the linking information for Extend Id + Session Id + Phone Id in the NoSQL db
	• Extend request
	7. User hits PTT, says utterance. The Extend Id will be embedded in the request sent from HU to OneCloud NLU Service.
	8. NLU passes slots etc to NCE Dialog.
	9. Dialog will access client data through REST call based on the scenario. The call are directed to API management service which in turn calls Java Microservice.
	10. Using the Extend Id, the Java Microservice will lookup the linked phone id and session id (and other uploaded device data).
	11. The NoSQL DB i.e. CosmosDB returns the device details including preloaded data such as default apps, contacts etc.
	12. After validation and data processing, an RPC call is made to the Crossbar WAMP instance to execute an action when the scenario demands it.
	13. The request is forwarded to the companion app.
	14. The companion app will return a response.
	15. The response is further translated to OneCloud compatible object and propagated back to NCE Dialog.
	16. Based on the response received, prompts are decided and sent to HU.


4. Why Cosmos Db ?
	1.  If your data contains many parent-child relationships and deep levels of hierarchy, you may want to consider using a NoSQL document database such as the Azure Cosmos DB SQL API.

	2. Ironically, given their name, relational databases present a less than optimal solution for modeling deep and complex relationships. The reason for this is that relationships between entities do not actually exist in a relational database. They need to be computed at runtime, with complex relationships requiring cartesian joins in order to allow mapping using queries. As a result, operations become exponentially more expensive in terms of computation as relationships increase.

	3. NSQL systems is that relationships are stored as “first class citizens” within the database. Thus, traversing relationships can be done in constant time, rather than increasing in time complexity with each new join or cross product.

	4. If you are managing data whose structures are constantly changing at a high rate, particularly if transactions can come from external sources where it is difficult to enforce conformity across the database, you may want to consider a more schema-agnostic approach using a managed NoSQL database service like Azure Cosmos DB

	5. One of the most obvious challenges when maintaining a relational database system is that most relational engines apply locks and latches to enforce strict ACID semantics. This approach has benefits in terms of ensuring a consistent data state within the database. However, there are heavy trade-offs with respect to concurrency, latency, and availability. Due to these fundamental architectural restrictions, high transactional volumes can result in the need to manually shard data. Implementing manual sharding can be a time consuming and painful exercise.

	6. If your transactional volumes are reaching extreme levels, such as many thousands of transactions per second, you should consider a distributed NoSQL database. Consider Azure Cosmos DB for maximum efficiency, ease of maintenance, and reduced total cost of ownership.

	7. Azure Cosmos DB in particular has a number of features that make it an even more seamless fit for JSON-based Microservices Architectures than many NoSQL databases:
		1. a choice of pure JSON data types
		2. a JavaScript engine and query API built into the database.
		3. a state-of-the-art change feed which clients can subscribe to in order to get notified of modifications to a container.
Drawbacks of NoSQL -
	transactions with many relations pointing to the same entity.
	transactions requiring strong consistency across the entire dataset.
 Benefits :-
	Horizontally distributed.
	Replicated across geographical locations.
	Latency is very low.

Extend Microservice :-
Multiple request come here to check app package, contact, then execute it. So has app related responsibilities.
Also load balancer has to be added when we want to scale or handle multiple requests.
HU and Cerence studio is a legacy system.
